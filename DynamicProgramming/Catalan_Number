DP:

#include <iostream>
#include<boost/multiprecision/cpp_int.hpp>
using boost::multiprecision::cpp_int; 
using namespace std;

int main() {
	//code
	int t;
	cin>>t;
	while(t--){
	    int n;
	    cin>>n;
	    cpp_int dp[n+1];
	    dp[0]=1;
	    dp[1]=1;
	    for(int i=2;i<=n;i++){
	        dp[i]=0;
	        for(int j=0;j<i;j++){
	            dp[i]+=dp[j]*dp[i-j-1];
	        }
	    }
	    cout<<dp[n]<<endl;
	}
	return 0;
}

-------------------------------------------------------------------------------------------------------------------------------------------
ITERATIVE:

#include<bits/stdc++.h>
#include <boost/multiprecision/cpp_int.hpp> 
using boost::multiprecision::cpp_int;
using namespace std;
cpp_int coefficient(int n,int k){
    cpp_int res=1;
    for(int i=0;i<k;i++){
        res=res*(n-i);
        res=res/(i+1);
    }
    return res;
}
int main(){
   int t;
   cin>>t;
   while(t--){
    int n;
    cin>>n;
    cpp_int result=coefficient(2*n,n);
    cout<<result/(n+1)<<endl;
    
   }
}

----------------------------------------------------------------------------------------------------------------------------------------
OUTPUT:

Input:
3
5
4
10

Output:
42
14
16796

